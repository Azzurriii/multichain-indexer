chains:
  defaults:
    batch_size: 10                # Number of blocks to process in one batch (affects performance & latency)
    poll_interval: "5s"           # Delay between each poll for new chain head (prevents spamming the node)
    client:
      timeout: "15s"              # Timeout for each RPC request
      max_retries: 3              # Number of retries if the request fails (429/timeout)
      retry_delay: "5s"           # Delay between retry attempts
      throttle:
        rps: 8                    # Requests per second limit to avoid being rate-limited
        burst: 16                 # Maximum short-term burst (token bucket)

  tron-mainnet:
    name: "tron-mainnet"          # Display name for the chain
    type: "tron"                  # Chain type (tron/evm/bitcoin/solana/etc.)
    nodes:
      # Primary node: TronGrid (API key required, 15 QPS limit)
      - url: "https://api.trongrid.io"
        headers:
          TRON-PRO-API-KEY: "${TRONGRID_TOKEN}"   # API key passed as header (read from env)
        api_key_env: "TRONGRID_TOKEN"             # Environment variable that holds the API key
      # Fallback nodes (free, lower rate limits)
      - url: "https://tron-rpc.publicnode.com"
      # - url: "https://tron.drpc.org" # Not supported for solidity wallet
    start_block: 75144237          # Block number to start indexing from
    from_latest: true              # true = start from the chain head instead of start_block
    poll_interval: "8s"            # Slower polling to reduce load & respect limits
    client:
      timeout: "15s"               # Longer timeout (Tron nodes often delay under rate limits)
      max_retries: 5               # Increase retries for stability
      retry_delay: "10s"           # Longer wait between retries to avoid bans
      throttle:
        rps: 5                     # Very conservative RPS (accounts for multiple workers)
        burst: 8                   # Smaller burst allowance

  ethereum-mainnet:
    name: "ethereum-mainnet"
    type: "evm"
    nodes:
      - url: "https://ethereum-rpc.publicnode.com"   # Public RPC node
      - url: "https://1rpc.io/eth"                   # Fallback node
      # - url: "https://eth-mainnet.g.alchemy.com/v2/${API_KEY}" # API key node
        # api_key_env: "ALCHEMY_KEY"
      # - url: "wss://mainnet.infura.io/ws/v3/${API_KEY}"        # WebSocket node
        # api_key_env: "INFURA_KEY"
    start_block: 23080871          # Starting block to index
    from_latest: true              # Index from the latest head
    reorg_rollback_window: 20      # Rollback window for reorg detection
    client:
      timeout: "30s"               # Longer timeout (Ethereum nodes can be slow)
      throttle:
        rps: 5                     # RPS limit
        burst: 10                  # Slightly higher burst allowance

  bnb-mainnet:
    name: "bnb-mainnet"
    type: "evm"
    nodes:
      - url: "https://bsc-rpc.publicnode.com"
      - url: "https://bsc.blockrazor.xyz"
      - url: "https://bnb.rpc.subquery.network/public"
    start_block: 59040717
    from_latest: true              # Always start from head (reduces DB backfill load)


nats:
  url: "nats://localhost:4222"     # NATS server connection URL
  subject_prefix: "indexer.transaction" # Prefix for subjects to publish transaction events


kvstore:
  type: "consul"                   # Backend type: badger | consul
  badger:
    directory: "data/badger"       # Folder for badger DB files
    prefix: ""                     # Optional key prefix (namespacing)
  consul:
    scheme: "http"                 # Connection scheme (http/https)
    address: "127.0.0.1:8500"      # Consul agent address
    folder: "indexer"              # Root folder in Consul KV
    token: ""                      # ACL token (if Consul security enabled)
    http_auth:
      username: ""                 # Basic auth username
      password: ""                 # Basic auth password


db:
  type: "postgres"                 # Database type
  url: "postgres://postgres:postgres@localhost:5432/postgres" # PostgreSQL DSN


bloomfilter:
  backend: "redis"                 # Backend type: redis | in_memory
  redis:
    wallet_address_repo: "wallet_address" # Repo of wallet addresses to preload
    batch_size: 1000               # Batch size when loading from DB
    key_prefix: "bloomfilter"      # Key prefix in Redis
    error_rate: 0.01               # Desired false positive rate
    capacity: 1000000              # Expected capacity (# of items)
  in_memory:
    wallet_address_repo: "wallet_address"
    expected_items: 1000000        # Expected item count
    false_positive_rate: 0.01      # Desired false positive rate
    batch_size: 1000               # Batch size when loading from DB


redis:
  url: "localhost:6379"            # Redis server connection
  password: ""                     # Password if authentication is enabled


environment: "development"         # Environment mode (development | staging | production)
